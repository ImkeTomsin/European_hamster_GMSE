# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 2);
colnames(sim_sum_1) <- c("Time", "Pop_size")
moving_month <- 0;
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full',
res_move_type = moving_month);
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% FEB){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAR){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% APR){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAY){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUN){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.19;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUL){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.19;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% AUG){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res)
}
if(next_time %in% SEP){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% OCT){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% NOV){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% DEC){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
sim_old <- sim_new; # This should always go at the end
#print(sim_sum_1[time_step,]); #Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
}) #end of tryCatch
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
###################################### Extra function to save landscape layout for each simulation
# Get the current timestamp
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
# Crop type plot
# Adjust plot margins to make space for the legend
output_folder<- "C:/Users/lucp13135/Documents/Simulations/Simulation 9b"
filename_crop <- file.path(output_folder, paste0(timestamp, ".png"))
png(filename_crop, width = 1000, height = 800)
par(mar = c(5, 4, 4, 8) + 0.1)
image(z = sim_old$LAND[,,1], col = c("#FF6961", "#EBD657", "#92C37F"), xaxt = "n", yaxt = "n",
main = "Crop Type Distribution", bty = "n", cex.main = 1.5, cex.lab = 1.2)
legend("right", inset = c(-0.13, 0),  legend = c("Crop Type 1", "Crop Type 2", "Crop Type 3"),
fill = c("#FF6961", "#EBD657", "#92C37F"), xpd = TRUE, cex = 1) # to show crop type distribution in the landscape
dev.off()
#####################################
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
#now timestep is also recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
combined_results <- as.data.frame(combined_results)
# Loop through each repetition
for (rep_id in unique(combined_results$rep)) {
# Subset data for the current repetition
rep_data <- combined_results[combined_results$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
combined_results[combined_results$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/lucp13135/Documents/Simulations/Simulation 9b/Simulation9b_100it_250startN.csv" #Give the simulation an appropriate name
write.csv(combined_results, file = file_path, row.names = FALSE)
library(dplyr)
sim_9b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 9b/Simulation9b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_9b %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_9b <- bind_rows(sim_9b, new_rows)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_9b<-generate_plot(plot_9b, "Scenario 9b")
plot_9b<-generate_plot(sim_9b, "Scenario 9b")
print(plot_9b)
mean_pop9b <- aggregate (Pop_size ~ Time, sim_9b, mean)
View(mean_pop9b)
TMAX <- 60; # Maximum number of months in the simulation
JAN  <- seq(from = 1,  to = TMAX, by = 12); # Time steps in JAN, FEB, MAR, etc.
FEB  <- seq(from = 2,  to = TMAX, by = 12);
MAR  <- seq(from = 3,  to = TMAX, by = 12);
APR  <- seq(from = 4,  to = TMAX, by = 12);
MAY  <- seq(from = 5,  to = TMAX, by = 12);
JUN  <- seq(from = 6,  to = TMAX, by = 12);
JUL  <- seq(from = 7,  to = TMAX, by = 12);
AUG  <- seq(from = 8,  to = TMAX, by = 12);
SEP  <- seq(from = 9,  to = TMAX, by = 12);
OCT  <- seq(from = 10, to = TMAX, by = 12);
NOV  <- seq(from = 11, to = TMAX, by = 12);
DEC  <- seq(from = 12, to = TMAX, by = 12)
# This way, we are able to use each time step in the GMSE loop to identify the month
cell_K <- function(res, DIM_1 = 447, DIM_2 = 447){
for(i in 1:DIM_1){
for(j in 1:DIM_2){
sum_ij <- sum(res[, 5] == i & res[, 6] == j)
if(sum_ij > 1){
on_ij             <- which(res[, 5] == i & res[, 6] == j);
loser_ij          <- sample(x = on_ij, size = sum_ij - 1);
res[loser_ij, 7]  <- 0; # Stop in tracks
res[loser_ij, 9]  <- 1; # Definite death
res[loser_ij, 10] <- 0; # No birth
res[loser_ij, 11] <- 0; # No birth
}
}
}
return(res);
}
#Now, if two hamsters occupy the same cell, one of them will die.
#This should be run after movement has happened, so that offspring are not removed before
#reproductively active/old enough to leave the mother
#This function is quite slow -- probably want to speed it up somehow
# The function below checks each hamster's cell location, then checks the crop type on that location, and adjusts population parameters accordingly
crop_hamster <- function(land, res){
N <- dim(res)[1]; # Number of hamsters
for(i in 1:N) {
xloc <- res[i, 5] +1; #+1 to fix indexing difference problem between R and C (otherwise error occurs about the landscape starting in (0,0))
yloc <- res[i, 6] +1;
crop <- land[xloc, yloc, 1];
#cat("Hamster ", i, " at (", xloc, ", ", yloc, ") has crop type: ", crop, "\n") #added this bit to check if the function is working properly, this shows that some hamsters' xloc or yloc randomly seems to change by 1 cell between simulations, even when movement is not simulated, sometimes both change, sometimes just one changes, and sometimes the crop type value (1, 2 or 3) also changes
if (crop == 1) {
res[i, 9] <- 1  # column 9 = death probability -> 100% mortality
#} else if (crop == 2 && next_time %in% c(AUG,SEP)) {
#res[i, 9] <- res[i, 9] + 0.05  # increase mortality by 5% in months after harvest
} else if (crop == 3 && next_time %in% c(JUN, JUL, AUG)) {
res[i, 10] <- 1.46
} else {
# Default case, nothing changes
}
}
return(res);
}
library(GMSE)
#parameters specified below are for hamsters in crop type 2. For type 3 an extra litter is modelled, for type 1 a different mortality is modelled (no survival)
DIM_1 <- 447; # Land dimension 1
DIM_2 <- 447; # Land dimension 2
iterations <- 100 #number of iterations
results <- list() #list to store results from each repetition
for (rep in 1:iterations) {
tryCatch({
################################### Adding the landscape function here = different landscape for each iteration
crop_type2 <- function(land, agents = 101) { # agents = 1 (manager) + number of stakeholders
xdim <- dim(land)[1]
ydim <- dim(land)[2]
# Randomly assign stakeholders to crop types
stakeholders_vector <- sample(2:agents) #randomly shuffle the stakeholders (agents), but leave out the first (= always the manager)
type3_stakeholders <- stakeholders_vector[1:20] #2 get type 3
type2_stakeholders <- stakeholders_vector[21:60] #4 get type 2
type1_stakeholders <- stakeholders_vector[61:100] #4 get type 1
# Create a vector to store the crop type for each stakeholder
stakeholder_types <- rep(NA, agents)
for (stakeholder in 2:agents) {
if (stakeholder %in% type3_stakeholders) {
stakeholder_types[stakeholder] <- 3
} else if (stakeholder %in% type2_stakeholders) {
stakeholder_types[stakeholder] <- 2
} else if (stakeholder %in% type1_stakeholders) {
stakeholder_types[stakeholder] <- 1
}
}
for (i in 1:xdim) {
for (j in 1:ydim) {
if (land[i, j, 3] %in% 2:agents) {
land[i, j, 1] <- stakeholder_types[land[i, j, 3]]
}
}
}
return(land)
}
#####################################################
# Initialise the first output
sim_old   <- gmse_apply(stakeholders    = 100,
res_movement    = 100,
res_move_type   = 0,
remove_pr       = 1 - 0.976083968,
lambda          = 0,
res_death_type  = 1,
observe_type    = 2,
res_move_obs    = FALSE,
max_ages        = 24,
RESOURCE_ini    = 250, # start N
culling         = FALSE,
land_ownership  = TRUE,
age_repr        = 4,
land_dim_1      = DIM_1,
land_dim_2      = DIM_2,
manage_target   = 2500,
get_res         = 'Full');
old_obs  <- sim_old[["observation_array"]];
# Add crop types on layer 1 of the landscape with the crop_type(2) function
sim_old[["LAND"]] <- crop_type2(land = sim_old[["LAND"]]);
# Initialise the results matrix for the current iteration; Currently, 3 variables are recorded as output
# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 2);
colnames(sim_sum_1) <- c("Time", "Pop_size")
moving_month <- 0;
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full',
res_move_type = moving_month);
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% FEB){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAR){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% APR){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAY){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUN){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.19;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUL){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.19;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% AUG){
moving_month                      <- 1;         # Movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res)
}
if(next_time %in% SEP){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% OCT){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% NOV){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
if(next_time %in% DEC){
moving_month                      <- 0;         # No movement
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster(land = temp_land,
res  = temp_res);
}
sim_old <- sim_new; # This should always go at the end
#print(sim_sum_1[time_step,]); #Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
}) #end of tryCatch
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
###################################### Extra function to save landscape layout for each simulation
# Get the current timestamp
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
# Crop type plot
# Adjust plot margins to make space for the legend
output_folder<- "C:/Users/lucp13135/Documents/Simulations/Simulation 10b"
filename_crop <- file.path(output_folder, paste0(timestamp, ".png"))
png(filename_crop, width = 1000, height = 800)
par(mar = c(5, 4, 4, 8) + 0.1)
image(z = sim_old$LAND[,,1], col = c("#FF6961", "#EBD657", "#92C37F"), xaxt = "n", yaxt = "n",
main = "Crop Type Distribution", bty = "n", cex.main = 1.5, cex.lab = 1.2)
legend("right", inset = c(-0.13, 0),  legend = c("Crop Type 1", "Crop Type 2", "Crop Type 3"),
fill = c("#FF6961", "#EBD657", "#92C37F"), xpd = TRUE, cex = 1) # to show crop type distribution in the landscape
dev.off()
#####################################
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
#now timestep is also recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
combined_results <- as.data.frame(combined_results)
# Loop through each repetition
for (rep_id in unique(combined_results$rep)) {
# Subset data for the current repetition
rep_data <- combined_results[combined_results$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
combined_results[combined_results$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/lucp13135/Documents/Simulations/Simulation 10b/Simulation10b_100it_250startN.csv" #Give the simulation an appropriate name
write.csv(combined_results, file = file_path, row.names = FALSE)
