#now timestep is also recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
combined_results <- as.data.frame(combined_results)
# Loop through each repetition
for (rep_id in unique(combined_results$rep)) {
# Subset data for the current repetition
rep_data <- combined_results[combined_results$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
combined_results[combined_results$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/lucp13135/Documents/Simulations/Simulation 11b/Simulation11b_100it_250startN.csv" #Give the simulation an appropriate name
write.csv(combined_results, file = file_path, row.names = FALSE)
library(dplyr)
sim_9b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 9b/Simulation9b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_9b %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250)
# Bind the new rows to the original data
sim_9b <- bind_rows(sim_9b, new_rows)
sim_10b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 10b/Simulation10b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_10b %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_10b <- bind_rows(sim_10b, new_rows)
sim_11b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 11b/Simulation11b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_11b %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250)
# Bind the new rows to the original data
sim_11b <- bind_rows(sim_11b, new_rows)
sim_12b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 12b/Simulation12b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_12b %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_12b <- bind_rows(sim_12b, new_rows)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_9b<-generate_plot(sim_9b,"Scenario 9b")
plot_10b<-generate_plot(sim_10b,"Scenario 10b")
plot_11b<-generate_plot(sim_11b,"Scenario 11b")
plot_12b<-generate_plot(sim_12b,"Scenario 12b")
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
library(dplyr)
sim_1 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/Simulation1_100it_15startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
library(dplyr)
new_rows <- sim_1 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 15) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_1 <- bind_rows(sim_1, new_rows)
sim_2 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/Simulation2_1000it_15startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_2 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 15) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_2 <- bind_rows(sim_2, new_rows)
sim_3 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/Simulation3_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_3 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_3 <- bind_rows(sim_3, new_rows)
sim_4 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/Simulation4_1000it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_4 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_4 <- bind_rows(sim_4, new_rows)
sim_5 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/Simulation5_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_5 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_5 <- bind_rows(sim_5, new_rows)
sim_6 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation6_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_6 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_6 <- bind_rows(sim_6, new_rows)
sim_7 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation7_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_7 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_7 <- bind_rows(sim_7, new_rows)
sim_8 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation8_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_8 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_8 <- bind_rows(sim_8, new_rows)
sim_9 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation9_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_9 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_9 <- bind_rows(sim_9, new_rows)
sim_10 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation10_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_10 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_10 <- bind_rows(sim_10, new_rows)
sim_11 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation11_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_11 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_11 <- bind_rows(sim_11, new_rows)
sim_12 <- read.csv("C:/Users/lucp13135/Documents/GitHub/European_hamster_GMSE/Output/simulation12_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_12 %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_12 <- bind_rows(sim_12, new_rows)
sim_9b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 9b/Simulation9b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_9b %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250)
# Bind the new rows to the original data
sim_9b <- bind_rows(sim_9b, new_rows)
sim_10b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 10b/Simulation10b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_10b %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_10b <- bind_rows(sim_10b, new_rows)
sim_11b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 11b/Simulation11b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_11b %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250)
# Bind the new rows to the original data
sim_11b <- bind_rows(sim_11b, new_rows)
sim_12b <- read.csv("C:/Users/lucp13135/Documents/Simulations/Simulation 12b/Simulation12b_100it_250startN.csv", header=TRUE,sep=",")
#Add starting population size (time = 0, N = 15 or 250) to each iteration
new_rows <- sim_12b %>%
group_by(rep) %>%
slice(1) %>%
mutate(Time = 0, Pop_size = 250) %>%
select(rep, Time, Pop_size)
# Bind the new rows to the original data
sim_12b <- bind_rows(sim_12b, new_rows)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_1<-generate_plot(sim_1, "Scenario 1")
plot_2<-generate_plot(sim_2, "Scenario 2")
plot_3<-generate_plot(sim_3, "Scenario 3")
plot_4<-generate_plot(sim_4, "Scenario 4")
plot_5<-generate_plot(sim_5, "Scenario 5")
plot_6<-generate_plot(sim_6, "Scenario 6")
plot_7<-generate_plot(sim_7, "Scenario 7")
plot_8<-generate_plot(sim_8, "Scenario 8")
plot_9<-generate_plot(sim_9, "Scenario 9")
plot_10<-generate_plot(sim_10, "Scenario 10")
plot_11<-generate_plot(sim_11, "Scenario 11")
plot_12<-generate_plot(sim_12, "Scenario 12")
plot_9b<-generate_plot(sim_9b,"Scenario 9b")
plot_10b<-generate_plot(sim_10b,"Scenario 10b")
plot_11b<-generate_plot(sim_11b,"Scenario 11b")
plot_12b<-generate_plot(sim_12b,"Scenario 12b")
# print(plot_1)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
grid.arrange(plot_5, plot_6, plot_7,plot_8, nrow = 2)
grid.arrange(plot_9, plot_10, plot_11,plot_12, nrow = 2)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time step", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_1<-generate_plot(sim_1, "Scenario 1")
plot_2<-generate_plot(sim_2, "Scenario 2")
plot_3<-generate_plot(sim_3, "Scenario 3")
plot_4<-generate_plot(sim_4, "Scenario 4")
plot_5<-generate_plot(sim_5, "Scenario 5")
plot_6<-generate_plot(sim_6, "Scenario 6")
plot_7<-generate_plot(sim_7, "Scenario 7")
plot_8<-generate_plot(sim_8, "Scenario 8")
plot_9<-generate_plot(sim_9, "Scenario 9")
plot_10<-generate_plot(sim_10, "Scenario 10")
plot_11<-generate_plot(sim_11, "Scenario 11")
plot_12<-generate_plot(sim_12, "Scenario 12")
plot_9b<-generate_plot(sim_9b,"Scenario 9b")
plot_10b<-generate_plot(sim_10b,"Scenario 10b")
plot_11b<-generate_plot(sim_11b,"Scenario 11b")
plot_12b<-generate_plot(sim_12b,"Scenario 12b")
# print(plot_1)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
grid.arrange(plot_5, plot_6, plot_7,plot_8, nrow = 2)
grid.arrange(plot_9, plot_10, plot_11,plot_12, nrow = 2)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
# Calculate the mean population size for each analysis
mean_pop1 <- aggregate(Pop_size ~ Time, sim_1, mean)
mean_pop2 <- aggregate(Pop_size ~ Time, sim_2, mean)
mean_pop3 <- aggregate(Pop_size ~ Time, sim_3, mean)
mean_pop4 <- aggregate(Pop_size ~ Time, sim_4, mean)
mean_pop5 <- aggregate(Pop_size ~ Time, sim_5, mean)
mean_pop6 <- aggregate(Pop_size ~ Time, sim_6, mean)
mean_pop7 <- aggregate(Pop_size ~ Time, sim_7, mean)
mean_pop8 <- aggregate(Pop_size ~ Time, sim_8, mean)
mean_pop9 <- aggregate(Pop_size ~ Time, sim_9, mean)
mean_pop10 <- aggregate(Pop_size ~ Time, sim_10, mean)
mean_pop11 <- aggregate(Pop_size ~ Time, sim_11, mean)
mean_pop12 <- aggregate(Pop_size ~ Time, sim_12, mean)
mean_pop9b <- aggregate (Pop_size ~ Time, sim_9b, mean)
mean_pop12b <- aggregate (Pop_size ~ Time, sim_12b, mean)
# Calculate the standard deviation
sd_pop1 <- aggregate(Pop_size ~ Time, sim_1, sd)
sd_pop2 <- aggregate(Pop_size ~ Time, sim_2, sd)
sd_pop3 <- aggregate(Pop_size ~ Time, sim_3, sd)
sd_pop4 <- aggregate(Pop_size ~ Time, sim_4, sd)
sd_pop5 <- aggregate(Pop_size ~ Time, sim_5, sd)
sd_pop6 <- aggregate(Pop_size ~ Time, sim_6, sd)
sd_pop7 <- aggregate(Pop_size ~ Time, sim_7, sd)
sd_pop8 <- aggregate(Pop_size ~ Time, sim_8, sd)
sd_pop9 <- aggregate(Pop_size ~ Time, sim_9, sd)
sd_pop10 <- aggregate(Pop_size ~ Time, sim_10, sd)
sd_pop11 <- aggregate(Pop_size ~ Time, sim_11, sd)
sd_pop12 <- aggregate(Pop_size ~ Time, sim_12, sd)
sd_pop12b <- aggregate(Pop_size ~ Time, sim_12b, sd)
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop <- rbind(mean_pop5, mean_pop6)
combined_mean_pop$Analysis <- rep(c("Scenario 5", "Scenario 6"), each = nrow(mean_pop5))
# Plot the combined mean population sizes
ggplot(combined_mean_pop, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line() +
theme_minimal()+
labs(x = "Time step", y = "Mean Population Size")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop2 <- rbind(mean_pop1, mean_pop2, mean_pop3, mean_pop4)
combined_mean_pop2$Analysis <- rep(c("Scenario 1", "Scenario 2","Scenario 3","Scenario 4"), each = nrow(mean_pop1))
# Plot the combined mean population sizes
custom_colors <- c( "#D0832E", "#EBD657", "#2FABAB", "#92C37F")  # Adjust colors as needed
ggplot(combined_mean_pop2, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line(linewidth=0.7) +
theme_minimal()+
labs(x = "Time", y = "Mean Population Size")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))+ # Same for y-axis
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
axis.title = element_text(size = 14),  # Increase size of axis titles
axis.text = element_text(size = 12),   # Increase size of axis labels
legend.title = element_text(size = 14), # Increase size of legend titles
legend.text = element_text(size = 12)  # Increase size of legend text
)
# Calculate the mean population size for each analysis
mean_pop1 <- aggregate(Pop_size ~ Time, sim_1, mean)
mean_pop2 <- aggregate(Pop_size ~ Time, sim_2, mean)
mean_pop3 <- aggregate(Pop_size ~ Time, sim_3, mean)
mean_pop4 <- aggregate(Pop_size ~ Time, sim_4, mean)
mean_pop5 <- aggregate(Pop_size ~ Time, sim_5, mean)
mean_pop6 <- aggregate(Pop_size ~ Time, sim_6, mean)
mean_pop7 <- aggregate(Pop_size ~ Time, sim_7, mean)
mean_pop8 <- aggregate(Pop_size ~ Time, sim_8, mean)
mean_pop9 <- aggregate(Pop_size ~ Time, sim_9, mean)
mean_pop10 <- aggregate(Pop_size ~ Time, sim_10, mean)
mean_pop11 <- aggregate(Pop_size ~ Time, sim_11, mean)
mean_pop12 <- aggregate(Pop_size ~ Time, sim_12, mean)
mean_pop9b <- aggregate (Pop_size ~ Time, sim_9b, mean)
mean_pop12b <- aggregate (Pop_size ~ Time, sim_12b, mean)
# Calculate the standard deviation
sd_pop1 <- aggregate(Pop_size ~ Time, sim_1, sd)
sd_pop2 <- aggregate(Pop_size ~ Time, sim_2, sd)
sd_pop3 <- aggregate(Pop_size ~ Time, sim_3, sd)
sd_pop4 <- aggregate(Pop_size ~ Time, sim_4, sd)
sd_pop5 <- aggregate(Pop_size ~ Time, sim_5, sd)
sd_pop6 <- aggregate(Pop_size ~ Time, sim_6, sd)
sd_pop7 <- aggregate(Pop_size ~ Time, sim_7, sd)
sd_pop8 <- aggregate(Pop_size ~ Time, sim_8, sd)
sd_pop9 <- aggregate(Pop_size ~ Time, sim_9, sd)
sd_pop10 <- aggregate(Pop_size ~ Time, sim_10, sd)
sd_pop11 <- aggregate(Pop_size ~ Time, sim_11, sd)
sd_pop12 <- aggregate(Pop_size ~ Time, sim_12, sd)
sd_pop12b <- aggregate(Pop_size ~ Time, sim_12b, sd)
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop <- rbind(mean_pop5, mean_pop6)
combined_mean_pop$Analysis <- rep(c("Scenario 5", "Scenario 6"), each = nrow(mean_pop5))
# Plot the combined mean population sizes
ggplot(combined_mean_pop, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line() +
theme_minimal()+
labs(x = "Time step", y = "Mean Population Size")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop2 <- rbind(mean_pop1, mean_pop2, mean_pop3, mean_pop4)
combined_mean_pop2$Analysis <- rep(c("Scenario 1", "Scenario 2","Scenario 3","Scenario 4"), each = nrow(mean_pop1))
# Plot the combined mean population sizes
custom_colors <- c( "#D0832E", "#EBD657", "#2FABAB", "#92C37F")  # Adjust colors as needed
ggplot(combined_mean_pop2, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line(linewidth=0.7) +
theme_minimal()+
labs(x = "Time step", y = "Mean Population Size")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))+ # Same for y-axis
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
axis.title = element_text(size = 14),  # Increase size of axis titles
axis.text = element_text(size = 12),   # Increase size of axis labels
legend.title = element_text(size = 14), # Increase size of legend titles
legend.text = element_text(size = 12)  # Increase size of legend text
)
ggplot(combined_mean_pop2, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line(linewidth=0.7) +
theme_minimal()+
labs(x = "Time step", y = "Mean Population Size")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))+ # Same for y-axis
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
axis.title = element_text(size = 14),  # Increase size of axis titles
axis.text = element_text(size = 12),   # Increase size of axis labels
legend.title = element_text(size = 14), # Increase size of legend titles
legend.text = element_text(size = 12)  # Increase size of legend text
)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time step", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_1<-generate_plot(sim_1, "Scenario 1")
plot_2<-generate_plot(sim_2, "Scenario 2")
plot_3<-generate_plot(sim_3, "Scenario 3")
plot_4<-generate_plot(sim_4, "Scenario 4")
plot_5<-generate_plot(sim_5, "Scenario 5")
plot_6<-generate_plot(sim_6, "Scenario 6")
plot_7<-generate_plot(sim_7, "Scenario 7")
plot_8<-generate_plot(sim_8, "Scenario 8")
plot_9<-generate_plot(sim_9, "Scenario 9")
plot_10<-generate_plot(sim_10, "Scenario 10")
plot_11<-generate_plot(sim_11, "Scenario 11")
plot_12<-generate_plot(sim_12, "Scenario 12")
plot_9b<-generate_plot(sim_9b,"Scenario 13")
plot_10b<-generate_plot(sim_10b,"Scenario 14")
plot_11b<-generate_plot(sim_11b,"Scenario 15")
plot_12b<-generate_plot(sim_12b,"Scenario 16")
# print(plot_1)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
grid.arrange(plot_5, plot_6, plot_7,plot_8, nrow = 2)
grid.arrange(plot_9, plot_10, plot_11,plot_12, nrow = 2)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
theme_minimal()+
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 0.82) + #plot the mean as a dark/black line
labs(x = "Time step", y = "Population Size", title = plot_title)+ #add labels and titles
scale_x_continuous(expand = c(0, 0), limits = c(0, 60))+  # Ensure x-axis starts at 0 and stops at 60
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) # Same for y-axis
}
plot_1<-generate_plot(sim_1, "Scenario 1")
plot_2<-generate_plot(sim_2, "Scenario 2")
plot_3<-generate_plot(sim_3, "Scenario 3")
plot_4<-generate_plot(sim_4, "Scenario 4")
plot_5<-generate_plot(sim_5, "Scenario 5")
plot_6<-generate_plot(sim_6, "Scenario 6")
plot_7<-generate_plot(sim_7, "Scenario 7")
plot_8<-generate_plot(sim_8, "Scenario 8")
plot_9<-generate_plot(sim_9, "Scenario 9")
plot_10<-generate_plot(sim_10, "Scenario 10")
plot_11<-generate_plot(sim_11, "Scenario 11")
plot_12<-generate_plot(sim_12, "Scenario 12")
plot_9b<-generate_plot(sim_9b,"Scenario 13")
plot_10b<-generate_plot(sim_10b,"Scenario 14")
plot_11b<-generate_plot(sim_11b,"Scenario 15")
plot_12b<-generate_plot(sim_12b,"Scenario 16")
# print(plot_1)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
grid.arrange(plot_5, plot_6, plot_7,plot_8, nrow = 2)
grid.arrange(plot_9, plot_10, plot_11,plot_12, nrow = 2)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
grid.arrange(plot_5, plot_6, plot_7,plot_8, nrow = 2)
grid.arrange(plot_9, plot_10, plot_11,plot_12, nrow = 2)
mean_pop9b <- aggregate (Pop_size ~ Time, sim_9b, mean)
mean_pop10b <- aggregate (Pop_size ~ Time, sim_10b, mean)
mean_pop11b <- aggregate (Pop_size ~ Time, sim_11b, mean)
mean_pop12b <- aggregate (Pop_size ~ Time, sim_12b, mean)
sd_pop9b <- aggregate(Pop_size ~ Time, sim_9b, sd)
sd_pop10b <- aggregate(Pop_size ~ Time, sim_10b, sd)
sd_pop11b <- aggregate(Pop_size ~ Time, sim_11b, sd)
sd_pop12b <- aggregate(Pop_size ~ Time, sim_12b, sd)
mean_pop1 <- aggregate(Pop_size ~ Time, sim_1, mean)
mean_pop2 <- aggregate(Pop_size ~ Time, sim_2, mean)
mean_pop3 <- aggregate(Pop_size ~ Time, sim_3, mean)
mean_pop4 <- aggregate(Pop_size ~ Time, sim_4, mean)
mean_pop5 <- aggregate(Pop_size ~ Time, sim_5, mean)
mean_pop6 <- aggregate(Pop_size ~ Time, sim_6, mean)
mean_pop7 <- aggregate(Pop_size ~ Time, sim_7, mean)
mean_pop8 <- aggregate(Pop_size ~ Time, sim_8, mean)
mean_pop9 <- aggregate(Pop_size ~ Time, sim_9, mean)
mean_pop10 <- aggregate(Pop_size ~ Time, sim_10, mean)
mean_pop11 <- aggregate(Pop_size ~ Time, sim_11, mean)
mean_pop12 <- aggregate(Pop_size ~ Time, sim_12, mean)
mean_pop9b <- aggregate (Pop_size ~ Time, sim_9b, mean)
mean_pop10b <- aggregate (Pop_size ~ Time, sim_10b, mean)
mean_pop11b <- aggregate (Pop_size ~ Time, sim_11b, mean)
mean_pop12b <- aggregate (Pop_size ~ Time, sim_12b, mean)
View(mean_pop1)
View(mean_pop10)
View(mean_pop11)
View(mean_pop11b)
View(mean_pop11b)
View(mean_pop12b)
View(mean_pop10b)
View(mean_pop9b)
View(sd_pop10b)
View(sd_pop11b)
View(sd_pop12b)
View(sim_9b)
View(sim_9b)
View(sd_pop9b)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
plot_9b<-generate_plot(sim_9b,"Scenario 13")
plot_10b<-generate_plot(sim_10b,"Scenario 14")
plot_11b<-generate_plot(sim_11b,"Scenario 15")
plot_12b<-generate_plot(sim_12b,"Scenario 16")
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
grid.arrange(plot_9b, plot_10b, plot_11b,plot_12b, nrow = 2)
