sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% APR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAY){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUN){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUL){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% AUG){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
sim_old <- sim_new; # BD: This should always go at the end
#print(sim_sum_1[time_step,]); # Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
# If an error occurs (extinction), record Pop_size and Pop_est as 0
sim_sum_1 <- matrix(data = 0, nrow = TMAX, ncol = 3)
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est")
sim_sum_1 <- cbind(rep, sim_sum_1)
results[[rep]] <- sim_sum_1
}) #end of tryCatch
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est");
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
library(GMSE)
DIM_1 <- 447; # Land dimension 1
DIM_2 <- 447; # Land dimension 2
iterations <- 1000 #number of iterations
results <- list() #list to store results from each repetition
for (rep in 1:iterations) {
tryCatch({
# Initialise the first output
sim_old   <- gmse_apply(stakeholders    = 1,
res_movement    = 0,
remove_pr       = 1 - 0.976083968,
lambda          = 0,
res_death_type  = 1,
observe_type    = 2, # but only once a year
res_move_obs    = FALSE,
max_ages        = 24,
RESOURCE_ini    = 15, # N
culling         = FALSE,
land_ownership  = TRUE,
age_repr        = 1,
land_dim_1      = DIM_1,
land_dim_2      = DIM_2,
manage_target   = 2500,
get_res         = 'Full');
old_obs  <- sim_old[["observation_array"]];
# Currently, 3 variables are recorded as output
# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 3);
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full');
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_1[time_step, 3] <- sim_new$basic_output$observation_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% FEB){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% APR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAY){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUN){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUL){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% AUG){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
sim_old <- sim_new; # BD: This should always go at the end
#print(sim_sum_1[time_step,]); # Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
# If an error occurs (extinction), record Pop_size and Pop_est as 0
sim_sum_1 <- matrix(data = 0, nrow = TMAX, ncol = 3)
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est")
sim_sum_1 <- cbind(rep, sim_sum_1)
results[[rep]] <- sim_sum_1
}) #end of tryCatch
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est");
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
library(GMSE)
DIM_1 <- 447; # Land dimension 1
DIM_2 <- 447; # Land dimension 2
iterations <- 1000 #number of iterations
results <- list() #list to store results from each repetition
for (rep in 1:iterations) {
tryCatch({
# Initialise the first output
sim_old   <- gmse_apply(stakeholders    = 1,
res_movement    = 0,
remove_pr       = 1 - 0.976083968,
lambda          = 0,
res_death_type  = 1,
observe_type    = 2, # but only once a year
res_move_obs    = FALSE,
max_ages        = 24,
RESOURCE_ini    = 250, # N
culling         = FALSE,
land_ownership  = TRUE,
age_repr        = 1,
land_dim_1      = DIM_1,
land_dim_2      = DIM_2,
manage_target   = 2500,
get_res         = 'Full');
old_obs  <- sim_old[["observation_array"]];
# Currently, 3 variables are recorded as output
# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 3);
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full');
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_1[time_step, 3] <- sim_new$basic_output$observation_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% FEB){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% APR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAY){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUN){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUL){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% AUG){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
sim_old <- sim_new; # BD: This should always go at the end
#print(sim_sum_1[time_step,]); # Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
# If an error occurs (extinction), record Pop_size and Pop_est as 0
sim_sum_1 <- matrix(data = 0, nrow = TMAX, ncol = 3)
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est")
sim_sum_1 <- cbind(rep, sim_sum_1)
results[[rep]] <- sim_sum_1
}) #end of tryCatch
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est");
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
TMAX <- 48; # Maximum number of months in the simulation
JAN  <- seq(from = 1,  to = TMAX, by = 12); # Time steps in JAN, FEB, MAR, etc.
FEB  <- seq(from = 2,  to = TMAX, by = 12);
MAR  <- seq(from = 3,  to = TMAX, by = 12);
APR  <- seq(from = 4,  to = TMAX, by = 12);
MAY  <- seq(from = 5,  to = TMAX, by = 12);
JUN  <- seq(from = 6,  to = TMAX, by = 12);
JUL  <- seq(from = 7,  to = TMAX, by = 12);
AUG  <- seq(from = 8,  to = TMAX, by = 12);
SEP  <- seq(from = 9,  to = TMAX, by = 12);
OCT  <- seq(from = 10, to = TMAX, by = 12);
NOV  <- seq(from = 11, to = TMAX, by = 12);
DEC  <- seq(from = 12, to = TMAX, by = 12)
# This way, we are able to use each time step in the GMSE loop to identify the month
cell_K <- function(res, DIM_1 = 447, DIM_2 = 447){
for(i in 1:DIM_1){
for(j in 1:DIM_2){
sum_ij <- sum(res[, 5] == i & res[, 6] == j)
if(sum_ij > 1){
on_ij             <- which(res[, 5] == i & res[, 6] == j);
loser_ij          <- sample(x = on_ij, size = sum_ij - 1);
res[loser_ij, 7]  <- 0; # Stop in tracks
res[loser_ij, 9]  <- 1; # Definite death
res[loser_ij, 10] <- 0; # No birth
res[loser_ij, 11] <- 0; # No birth
}
}
}
return(res);
}
#Now, if two hamsters occupy the same cell, one of them will die.
#This should be run after movement has happened, so that offspring are not removed before
#reproductively active/old enough to leave the mother
#This function is quite slow -- probably want to speed it up somehow
library(GMSE)
DIM_1 <- 447; # Land dimension 1
DIM_2 <- 447; # Land dimension 2
iterations <- 1000 #number of iterations
results <- list() #list to store results from each repetition
for (rep in 1:iterations) {
tryCatch({
# Initialise the first output
sim_old   <- gmse_apply(stakeholders    = 1,
res_movement    = 0,
remove_pr       = 1 - 0.976083968,
lambda          = 0,
res_death_type  = 1,
observe_type    = 2, # but only once a year
res_move_obs    = FALSE,
max_ages        = 24,
RESOURCE_ini    = 30, # N
culling         = FALSE,
land_ownership  = TRUE,
age_repr        = 1,
land_dim_1      = DIM_1,
land_dim_2      = DIM_2,
manage_target   = 2500,
get_res         = 'Full');
old_obs  <- sim_old[["observation_array"]];
# Currently, 3 variables are recorded as output
# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 3);
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full');
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_1[time_step, 3] <- sim_new$basic_output$observation_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% FEB){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% APR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% MAY){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUN){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% JUL){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% AUG){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
}
sim_old <- sim_new; # BD: This should always go at the end
#print(sim_sum_1[time_step,]); # Activate to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
# If an error occurs (extinction), record Pop_size and Pop_est as 0
sim_sum_1 <- matrix(data = 0, nrow = TMAX, ncol = 3)
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est")
sim_sum_1 <- cbind(rep, sim_sum_1)
results[[rep]] <- sim_sum_1
}) #end of tryCatch
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est");
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
