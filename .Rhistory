res  = temp_res)
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
sim_old <- sim_new; # BD: This should always go at the end
print(sim_sum_1[time_step,]); # BD: Just to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
}) #end of tryCatch
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
#now timestep is also recorded as a 0 from the moment extinction ocurred
combined_results <- as.data.frame(combined_results)
# Loop through each repetition
for (rep_id in unique(combined_results$rep)) {
# Subset data for the current repetition
rep_data <- combined_results[combined_results$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
combined_results[combined_results$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/test.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
library(GMSE)
#parameters specified below are for hamsters in crop type 3. For types 1 and 2, a different mortality is modelled each month.
DIM_1 <- 447; # Land dimension 1
DIM_2 <- 447; # Land dimension 2
iterations <- 10 #number of iterations
results <- list() #list to store results from each repetition
for (rep in 1:iterations) {
tryCatch({
# Initialise the first output
sim_old   <- gmse_apply(stakeholders    = 10, # should be the same as in function crop_type
res_movement    = 0,
remove_pr       = 1 - 0.976083968,
lambda          = 0,
res_death_type  = 1,
observe_type    = 2, # but only once a year
res_move_obs    = FALSE,
max_ages        = 24,
RESOURCE_ini    = 30, # N
culling         = FALSE,
land_ownership  = TRUE,
age_repr        = 1,
land_dim_1      = DIM_1,
land_dim_2      = DIM_2,
manage_target   = 2500,
get_res         = 'Full');
old_obs  <- sim_old[["observation_array"]];
# Add crop types on layer 1 of the landscape with the crop_type function
sim_old[["LAND"]] <- crop_type(land = sim_old[["LAND"]]);
# Initialise the results matrix for the current iteration; Currently, 3 variables are recorded as output
# Double-brackets: technically a bit more secure. It works if you edit columns of the resource_array directly.
sim_sum_1 <- matrix(data = NA, nrow = TMAX, ncol = 3);
colnames(sim_sum_1) <- c("Time", "Pop_size", "Pop_est")
for(time_step in 1:TMAX){
sim_new                 <- gmse_apply(old_list = sim_old, get_res = 'Full');
sim_sum_1[time_step, 1] <- time_step;
sim_sum_1[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_1[time_step, 3] <- sim_new$basic_output$observation_results[1];
next_time               <- time_step + 1; # What happens next time step?
if(next_time %in% JAN){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.976083968; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% FEB){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.94824969; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.9023544; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% APR){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.811569975; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% MAY){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.805694059; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUN){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.794513672; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% JUL){
sim_new[["resource_array"]][, 7]  <- 100;       # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.767700722; # Death probability
sim_new[["resource_array"]][, 10] <- 1.18;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% AUG){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.842305069; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
old_obs                           <- sim_new[["observation_array"]];
temp_res                          <- sim_new[["resource_array"]];
sim_new[["resource_array"]]       <- cell_K(res   = temp_res, DIM_1 = DIM_1,
DIM_2 = DIM_2);
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,  #function 2 because birth rate changes for type 3
res  = temp_res)
}
if(next_time %in% SEP){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.877005333; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% OCT){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.891729601; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% NOV){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.939895976; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
if(next_time %in% DEC){
sim_new[["resource_array"]][, 7]  <- 0;         # Movement distance
sim_new[["resource_array"]][, 9]  <- 1 - 0.956833861; # Death probability
sim_new[["resource_array"]][, 10] <- 0;         # Birth probability
sim_new[["observation_array"]]    <- old_obs;   # Use old observations
temp_res                          <- sim_new[["resource_array"]];
temp_land                         <- sim_new[["LAND"]];
sim_new[["resource_array"]]       <- crop_hamster_1(land = temp_land,
res  = temp_res);
}
sim_old <- sim_new; # BD: This should always go at the end
print(sim_sum_1[time_step,]); # BD: Just to see the simulation progress
}
}, error = function(e) { #tryCatch: if error occurs because N = 0
cat("Error occurred in iteration", rep, ":", conditionMessage(e), "\n")
}) #end of tryCatch
sim_sum_1 <- cbind(rep, sim_sum_1); # Add iteration number as a column
print(sim_sum_1);
results[[rep]] <- sim_sum_1
}
combined_results <- do.call(rbind, results)
combined_results[is.na(combined_results)] <- 0
#now timestep is also recorded as a 0 from the moment extinction ocurred
combined_results <- as.data.frame(combined_results)
# Loop through each repetition
for (rep_id in unique(combined_results$rep)) {
# Subset data for the current repetition
rep_data <- combined_results[combined_results$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
combined_results[combined_results$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/test.csv"
write.csv(combined_results, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_1 <- as.data.frame(data_1)
# Loop through each repetition
for (rep_id in unique(data_1$rep)) {
# Subset data for the current repetition
rep_data <- data_1[data_1$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_1[data_1$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN15.csv"
write.csv(data_1, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_1b <- as.data.frame(data_1b)
# Loop through each repetition
for (rep_id in unique(data_1b$rep)) {
# Subset data for the current repetition
rep_data <- data_1b[data_1b$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_1b[data_1b$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN15.csv"
write.csv(data_1b, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_2 <- as.data.frame(data_2)
# Loop through each repetition
for (rep_id in unique(data_2$rep)) {
# Subset data for the current repetition
rep_data <- data_2[data_2$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_2[data_2$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN30.csv"
write.csv(data_2, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_2b <- as.data.frame(data_2b)
# Loop through each repetition
for (rep_id in unique(data_2b$rep)) {
# Subset data for the current repetition
rep_data <- data_2[data_2b$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_2b[data_2b$rep == rep_id, ] <- rep_data
}
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_2b <- as.data.frame(data_2b)
# Loop through each repetition
for (rep_id in unique(data_2b$rep)) {
# Subset data for the current repetition
rep_data <- data_2b[data_2b$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_2b[data_2b$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN30.csv"
write.csv(data_2b, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_3 <- as.data.frame(data_3)
# Loop through each repetition
for (rep_id in unique(data_3$rep)) {
# Subset data for the current repetition
rep_data <- data_3[data_3$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_3[data_3$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN250.csv"
write.csv(data_3, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
data_test<- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/100iterations_testmixed_startN30.csv", header=TRUE,sep=",")
# in these data, time step is still recorded as a 0 from the moment extinction occurred, we want time step to be recorded correctly
data_3b <- as.data.frame(data_3b)
# Loop through each repetition
for (rep_id in unique(data_3b$rep)) {
# Subset data for the current repetition
rep_data <- data_3b[data_3b$rep == rep_id, ]
# Loop through each row in the current repetition's data
for (i in 2:nrow(rep_data)) {
# If the current time step is 0, replace it with the previous time step + 1
if (rep_data$Time[i] == 0) {
rep_data$Time[i] <- rep_data$Time[i - 1] + 1
}
}
# Replace the data for the current repetition in the original data frame
data_3b[data_3b$rep == rep_id, ] <- rep_data
}
file_path <- "C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN250.csv"
write.csv(data_3b, file = file_path, row.names = FALSE)
data_1 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3 <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/100iterations_type3_startN250.csv", header=TRUE,sep=",")
data_1b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN15.csv", header=TRUE,sep=",")
data_2b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN30.csv", header=TRUE,sep=",")
data_3b <- read.csv("C:/Users/imket/Documents/GitHub/European_hamster_GMSE/Output/1000iterations_type3_startN250.csv", header=TRUE,sep=",")
View(data_1)
library(ggplot2)
library(gridExtra)
generate_plot <- function(data, plot_title) {
ggplot(data, aes(x = Time, y = Pop_size, group = rep)) +
geom_line(color = "lightgrey") + #plot all iterations as grey lines
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "black", linewidth = 1) + #plot the mean as a dark/black line
labs(x = "Time", y = "Population Size", title = plot_title) #add labels and titles
}
plot_1<-generate_plot(data_1, "N15 100")
plot_2<-generate_plot(data_2, "N30 100")
plot_3<-generate_plot(data_3, "N250 100")
plot_1b<-generate_plot(data_1b, "N15 1000")
plot_2b<-generate_plot(data_2b, "N30 1000")
plot_3b<-generate_plot(data_3b, "N250 1000")
# print(plot_1)
grid.arrange(plot_1, plot_2, plot_3, nrow = 1)
grid.arrange(plot_1b, plot_2b, plot_3b, nrow = 1)
grid.arrange(plot_1, plot_1b, nrow = 1)
# Calculate the mean population size for each analysis
mean_pop1 <- aggregate(Pop_size ~ Time, data_1, mean)
mean_pop2 <- aggregate(Pop_size ~ Time, data_2, mean)
mean_pop3 <- aggregate(Pop_size ~ Time, data_3, mean)
# Remove the row where Time == 0, if it exists; this is necessary because the above function randomly seems to incorporate a timestep 0 in the first two dataframes?
mean_pop1 <- mean_pop1[mean_pop1$Time != 0, ]
mean_pop2 <- mean_pop2[mean_pop2$Time != 0, ]
mean_pop3 <- mean_pop3[mean_pop3$Time != 0, ]
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop <- rbind(mean_pop1, mean_pop2, mean_pop3)
combined_mean_pop$Analysis <- rep(c("Analysis 1", "Analysis 2", "Analysis 3"), each = nrow(mean_pop1))
# Plot the combined mean population sizes
ggplot(combined_mean_pop, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line() +
labs(x = "Time", y = "Mean Population Size", title = "Mean Population Size Over Time")
#### Also to compare 100 and 1000 iterations
# Calculate the mean population size for each analysis (1000 iterations)
mean_pop1b <- aggregate(Pop_size ~ Time, data_1b, mean)
mean_pop2b <- aggregate(Pop_size ~ Time, data_2b, mean)
mean_pop3b <- aggregate(Pop_size ~ Time, data_3b, mean)
# Remove the row where Time == 0, if it exists; this is necessary because the above function randomly seems to incorporate a timestep 0 in the first two dataframes?
mean_pop1b <- mean_pop1b[mean_pop1b$Time != 0, ]
mean_pop2b <- mean_pop2b[mean_pop2b$Time != 0, ]
mean_pop3b <- mean_pop3b[mean_pop3b$Time != 0, ]
# Combine the mean population sizes from all analyses into a single data frame
combined_mean_pop2 <- rbind(mean_pop1, mean_pop2, mean_pop3, mean_pop1b, mean_pop2b, mean_pop3b)
combined_mean_pop2$Analysis <- rep(c("15 100", "30 100", "250 100", "15 1000", "30 1000", "250 1000"), each = nrow(mean_pop1))
# Plot the combined mean population sizes
ggplot(combined_mean_pop2, aes(x = Time, y = Pop_size, color = Analysis)) +
geom_line() +
labs(x = "Time", y = "Mean Population Size", title = "Mean Population Size Over Time")
# Determine the number of repetitions
reps <- max(data_1b$rep)
# Initialize a counter for extinction events
extinction_count <- 0
# Loop through each repetition
for (i in 1:reps) {
# Subset data for the current repetition
rep_data <- subset(data_1b, rep == i)
# Check if the population size ever reaches zero
if (any(rep_data$Pop_size == 0)) {
extinction_count <- extinction_count + 1
}
}
# Calculate the probability of extinction
probability_extinction <- extinction_count / reps
# Print the result
print(paste("Probability of extinction:", probability_extinction))
